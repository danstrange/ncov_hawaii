#!/usr/bin/env python3
#
# This script generates a TSV file containing country names and population sizes.

import argparse
import os
from pathlib import Path
import pandas as pd
import ssl
import urllib.request


def download_source_data(path):
    # This is the link for "1950-2100, all scenarios"¹ on the UN population CSV
    # download page: <https://population.un.org/wpp/Download/Standard/CSV/>
    url = 'https://population.un.org/wpp/Download/Files/1_Indicator%20(Standard)/CSV_FILES/WPP2024_TotalPopulationBySex.csv.gz'

    # As of 2024-08-07, the URL requires a workaround to download programmatically:
    # <https://github.com/urllib3/urllib3/issues/2653#issuecomment-1165307051>
    # <https://www.ssllabs.com/ssltest/analyze.html?d=population.un.org>
    ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    ctx.options |= 0x4  # OP_LEGACY_SERVER_CONNECT
    response = urllib.request.urlopen(url, context=ctx)

    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, 'wb') as f:
        f.write(response.read())


def export_population_weights(output):
    csv = Path(os.path.dirname(__file__)) / "data/WPP2024_TotalPopulationBySex.csv.gz"
    source = 'the United Nations World Population Prospects'
    if os.path.exists(output):
        print(f'Source data already exists: {str(csv)!r}')
        print(f'... skipping download.')
    else:
        print(f'Downloading source data to {str(csv)!r}...')
        download_source_data(csv)

    print('Formatting data for output...')
    df = pd.read_csv(csv, usecols=['Location', 'LocTypeName', 'Time', 'PopTotal'], dtype='str')

    # Drop rows that represent aggregate regions/subregions/etc.
    df = df[df['LocTypeName'] == 'Country/Area']

    # Use data from the latest non-forecast year
    year = '2023'
    df = df[df['Time'] == year]

    # Rename columns to match names in metadata
    column_name_map = {
        'Location': 'country',
        'PopTotal': 'weight',
    }
    df = df.rename(columns=column_name_map)

    # Keep only the columns used above
    df = df[column_name_map.values()]

    # Set country as index and sort alphabetically
    df = df.set_index('country')
    df = df.sort_index()

    # Rename countries to match values in metadata
    country_name_map = {
        "Bolivia (Plurinational State of)": "Bolivia",
        "Bonaire, Sint Eustatius and Saba": "Bonaire",
        "Brunei Darussalam": "Brunei",
        "China, Hong Kong SAR": "Hong Kong",
        "China, Macao SAR": "Macao",
        "China, Taiwan Province of China": "Taiwan",
        "Comoros": "Union of the Comoros",
        "Congo": "Republic of the Congo",
        "Curaçao": "Curacao",
        "Czechia": "Czech Republic",
        "Iran (Islamic Republic of)": "Iran",
        "Kosovo (under UNSC res. 1244)": "Kosovo",
        "Lao People's Democratic Republic": "Laos",
        "Micronesia (Fed. States of)": "Micronesia",
        "Republic of Korea": "South Korea",
        "Republic of Moldova": "Moldova",
        "Russian Federation": "Russia",
        "Saint Martin (French part)": "Saint Martin",
        "Sint Maarten (Dutch part)": "Sint Maarten",
        "State of Palestine": "Palestine",
        "Syrian Arab Republic": "Syria",
        "Türkiye": "Turkey",
        "United Republic of Tanzania": "Tanzania",
        "United States of America": "USA",
        "Venezuela (Bolivarian Republic of)": "Venezuela",
        "Viet Nam": "Vietnam",
    }
    df = df.rename(index=country_name_map)

    # Ensure int weights are written without decimals
    df['weight'] = pd.to_numeric(df['weight']).astype(int)

    print(f'Writing data to {str(output)!r}...')

    # Delete output file if it already exists
    if os.path.exists(output):
        os.remove(output)

    # Export
    with open(output, 'a') as f:
        print("# [DO NOT EDIT] This file was generated by scripts/developer_scripts/get_population_weights", file=f)
        print(f"# Based on {year} population estimates from {source}", file=f)
        df.to_csv(f, index=True, sep='\t')

    print('Done.')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Create population sizes file",
    )

    parser.add_argument('--output', type=str, metavar="FILE",
        default="defaults/population_weights.tsv",
        help="Path to output population sizes file",
    )
    args = parser.parse_args()

    export_population_weights(args.output)
